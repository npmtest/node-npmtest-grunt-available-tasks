{"/home/travis/build/npmtest/node-npmtest-grunt-available-tasks/test.js":"/* istanbul instrument in package npmtest_grunt_available_tasks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-available-tasks/lib.npmtest_grunt_available_tasks.js":"/* istanbul instrument in package npmtest_grunt_available_tasks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_available_tasks = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_available_tasks = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-available-tasks/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-available-tasks && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_available_tasks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_available_tasks\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_available_tasks.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_available_tasks.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_available_tasks.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_available_tasks.__dirname + '/lib.npmtest_grunt_available_tasks.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-available-tasks/node_modules/grunt-available-tasks/Gruntfile.js":"/*\n * grunt-available-tasks\n * https://github.com/ben-eb/grunt-available-tasks\n *\n * Copyright (c) 2013 Ben Briggs\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n    require('load-grunt-tasks')(grunt);\n    grunt.initConfig({\n        jscs: {\n            options: {\n                config: '.jscs.json'\n            },\n            source: [\n                'lib/**/*.js',\n                'tasks/**/*.js',\n                'test/**/*.js'\n            ]\n        },\n        jshint: {\n            all: [\n                'Gruntfile.js',\n                'tasks/**/*.js',\n                'lib/**/*.js'\n            ],\n            test: {\n                src: ['test/**/*.js'],\n                options: {\n                    'predef' : ['describe', 'it', 'beforeEach']\n                }\n            },\n            options: {\n                jshintrc: true\n            },\n        },\n        lintspaces: {\n            source: {\n                src: [\n                    'tasks/**/*.js',\n                    'test/**/*.js',\n                    'lib/**/*.js',\n                    'Gruntfile.js',\n                    'README.md'\n                ],\n                options: {\n                    newline         : true,\n                    trailingspaces  : true,\n                    indentation     : 'spaces',\n                    spaces          : 4,\n                    ignores         : ['js-comments']\n                }\n            }\n        },\n        availabletasks: {\n            options: {\n                filter: 'include',\n                tasks: ['tasks', 'default'],\n                sort: ['tasks']\n            },\n            defaultreporter: {},\n            markdownreporter: {\n                options: {\n                    reporter: 'markdown'\n                }\n            },\n            customreporter: {\n                options: {\n                    reporter: function(options) {\n                        grunt.log.writeln(options.currentTask.name);\n                    }\n                }\n            }\n        },\n        mochaTest: {\n            unit: ['test/lib/**/*.js'],\n            options: {\n                reporter: 'spec'\n            }\n        }\n    });\n    // Lint all the things\n    grunt.registerTask('default', 'Run code validation tasks', ['lintspaces', 'jshint', 'jscs', 'mochaTest', 'tasks']);\n    // Alias availabletasks with tasks for easier typing\n    grunt.registerTask('tasks', ['availabletasks:defaultreporter']);\n    // Actually load this plugin's task(s).\n    grunt.loadTasks('tasks');\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-available-tasks/node_modules/grunt-available-tasks/lib/filterTasks.js":"'use strict';\n\nvar _ = require('lodash');\n\n// Filtering rules are optional; delete those tasks that don't pass a filter\nfunction filterTasks (type, tasks, alltasks) {\n    var contains = function (task) {\n        return _.includes(tasks, task.name);\n    };\n\n    if (type === 'include') {\n        return _.filter(alltasks, contains);\n    } else if (type === 'exclude') {\n        return _.reject(alltasks, contains);\n    }\n    return alltasks;\n}\n\nmodule.exports = filterTasks;\n","/home/travis/build/npmtest/node-npmtest-grunt-available-tasks/node_modules/grunt-available-tasks/lib/get_output.js":"'use strict';\n\nvar _  = require('lodash');\n\nfunction getOutput (output, groups, taskOptions, hideUngrouped) {\n    var hasGroup = false;\n    Object.keys(groups).forEach(function (group) {\n        // Use contains to make sure that the task name is an exact match:\n        // i.e. we don't want to match tasks and availabletasks as true\n        if (_.includes(groups[group], taskOptions.name)) {\n            hasGroup = true;\n            var newobj = _.clone(taskOptions);\n            output.push(_.extend(newobj, {\n                group : _.capitalize(group)\n            }));\n        }\n    });\n    if (!hasGroup) {\n        if (Object.keys(groups).length) {\n            if (!hideUngrouped) {\n                output.push(_.extend(taskOptions, {\n                    group : 'Ungrouped'\n                }));\n            }\n        } else {\n            output.push(taskOptions);\n        }\n    }\n}\n\nmodule.exports = getOutput;\n","/home/travis/build/npmtest/node-npmtest-grunt-available-tasks/node_modules/grunt-available-tasks/lib/reporters.js":"'use strict';\n\nvar _     = require('lodash'),\n    chalk = require('chalk');\n\nfunction markdownReporter (options) {\n    var meta        = options.meta,\n        task        = options.currentTask,\n        targets     = '',\n        indentlevel = '';\n\n    if (meta.header && meta.groupCount) {\n        indentlevel = '#';\n        console.log('## ' + task.group + '\\n');\n    }\n\n    if (task.targets.length > 1) {\n        targets = indentlevel + '### Targets: `' + task.targets.join('`, `') + '`';\n    }\n\n    console.log(indentlevel + '## ' + task.name + '\\n' + targets + '\\n' + task.info + '\\n');\n}\n\nfunction defaultReporter (options) {\n    var meta    = options.meta,\n        task    = options.currentTask,\n        targets = '';\n\n    if (meta.header && meta.groupCount) {\n        console.log('\\n' + chalk.bold(task.group));\n    }\n\n    if (task.targets.length > 1) {\n        targets = '(' + task.targets.join('|') + ')';\n    }\n\n    console.log(\n        chalk.cyan(_.padEnd(task.name, meta.longest)),\n        chalk.white(_.pad(task.type, 4)),\n        task.info,\n        chalk.green(targets)\n    );\n}\n\nmodule.exports.default  = defaultReporter;\nmodule.exports.markdown = markdownReporter;\n","/home/travis/build/npmtest/node-npmtest-grunt-available-tasks/node_modules/grunt-available-tasks/lib/taskIdentifiers.js":"module.exports = {\n    single : '>',\n    multi  : '->',\n    user   : '=>'\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-available-tasks/node_modules/grunt-available-tasks/tasks/available_tasks.js":"/*\n * grunt-available-tasks\n * https://github.com/ben-eb/grunt-available-tasks\n *\n * Copyright (c) 2013-2015 Ben Briggs\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar filterTasks = require('../lib/filterTasks'),\n    getOutput   = require('../lib/get_output'),\n    reporter    = require('../lib/reporters'),\n    ids         = require('../lib/taskIdentifiers'),\n    _           = require('lodash');\n\nmodule.exports = function (grunt) {\n    grunt.registerMultiTask('availabletasks', 'List available Grunt tasks & targets.', function () {\n        var output  = [],\n            header  = '',\n            options = this.options({\n                filter        : false,\n                tasks         : false,\n                sort          : true,\n                hideUngrouped : false,\n                groups        : {},\n                descriptions  : {},\n                showTasks     : ['single', 'multi', 'user'],\n                reporter      : 'default'\n            }),\n            // Delete tasks that don't pass a filter\n            tasks = filterTasks(options.filter, options.tasks, grunt.task._tasks);\n\n        // Override descriptions with our own values\n        Object.keys(options.descriptions).forEach(function (description) {\n            var task = _.find(tasks, { name : description });\n            if (task) {\n                task.info = options.descriptions[description];\n            }\n        });\n        // Sort the tasks by name if sorting is enabled\n        if (options.sort) {\n            tasks = _.sortBy(tasks, 'name');\n        }\n        // Did we define a custom sort?\n        if (options.sort instanceof Array) {\n            tasks = _.sortBy(tasks, function (task) {\n                var index = options.sort.indexOf(task.name);\n                return (!~index) ? options.sort.length : index;\n            });\n        }\n        _.each(tasks, function (task) {\n            var name    = task.name,\n                config  = grunt.config.getRaw(name),\n                targets = [],\n                type    = ids.user;\n            // test if the task is a local config or something installed\n            if (~task.meta.info.indexOf('local Npm module')) {\n                type = (task.multi) ? ids.multi : ids.single;\n            }\n            // Delete global options from the task targets\n            if (typeof config === 'object' && task.multi) {\n                delete config.options;\n                targets = Object.keys(config);\n            }\n            // Get the output of the task\n            var allowedTypes = _.map(Object.keys(ids), function (id) {\n                if (_.includes(options.showTasks, id)) {\n                    return ids[id];\n                }\n            });\n            if (_.includes(allowedTypes, type)) {\n                getOutput(output, options.groups, {\n                    name    : task.name,\n                    type    : type,\n                    info    : task.info,\n                    targets : targets\n                }, options.hideUngrouped);\n            }\n        });\n        _.chain(output)\n            .sortBy(function (value) {\n                return (value.group === 'Ungrouped') ? 1 : 0;\n            })\n            .groupBy('group')\n            .each(function (group) {\n                header = group.group;\n                _.each(group, function (o) {\n                    var reportoptions = {\n                        currentTask : o,\n                        meta        : {\n                            taskCount  : Object.keys(tasks).length,\n                            groupCount : Object.keys(options.groups).length,\n                            header     : header !== '',\n                            longest    : _.maxBy(tasks, function (task) {\n                                return task.name.length;\n                            }).name.length\n                        }\n                    };\n                    header = '';\n                    var reportFn = (typeof options.reporter === 'function') ? options.reporter : reporter[options.reporter];\n                    reportFn.call(this, reportoptions);\n                });\n            })\n            .value();\n    });\n};\n"}